// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	api "github.com/alexm24/golang/internal/handler/api"
	models "github.com/alexm24/golang/internal/models"
	types "github.com/deepmap/oapi-codegen/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIAdmin is a mock of IAdmin interface.
type MockIAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockIAdminMockRecorder
}

// MockIAdminMockRecorder is the mock recorder for MockIAdmin.
type MockIAdminMockRecorder struct {
	mock *MockIAdmin
}

// NewMockIAdmin creates a new mock instance.
func NewMockIAdmin(ctrl *gomock.Controller) *MockIAdmin {
	mock := &MockIAdmin{ctrl: ctrl}
	mock.recorder = &MockIAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAdmin) EXPECT() *MockIAdminMockRecorder {
	return m.recorder
}

// CheckAdminUser mocks base method.
func (m *MockIAdmin) CheckAdminUser(username api.SUsername) (api.SAdmin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAdminUser", username)
	ret0, _ := ret[0].(api.SAdmin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAdminUser indicates an expected call of CheckAdminUser.
func (mr *MockIAdminMockRecorder) CheckAdminUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAdminUser", reflect.TypeOf((*MockIAdmin)(nil).CheckAdminUser), username)
}

// GetToken mocks base method.
func (m *MockIAdmin) GetToken(user api.SUsername) (api.SToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", user)
	ret0, _ := ret[0].(api.SToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockIAdminMockRecorder) GetToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockIAdmin)(nil).GetToken), user)
}

// MockIBroadcasts is a mock of IBroadcasts interface.
type MockIBroadcasts struct {
	ctrl     *gomock.Controller
	recorder *MockIBroadcastsMockRecorder
}

// MockIBroadcastsMockRecorder is the mock recorder for MockIBroadcasts.
type MockIBroadcastsMockRecorder struct {
	mock *MockIBroadcasts
}

// NewMockIBroadcasts creates a new mock instance.
func NewMockIBroadcasts(ctrl *gomock.Controller) *MockIBroadcasts {
	mock := &MockIBroadcasts{ctrl: ctrl}
	mock.recorder = &MockIBroadcastsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBroadcasts) EXPECT() *MockIBroadcastsMockRecorder {
	return m.recorder
}

// ChangeBroadcast mocks base method.
func (m *MockIBroadcasts) ChangeBroadcast(item models.PutBroadcast) (models.Broadcasts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeBroadcast", item)
	ret0, _ := ret[0].(models.Broadcasts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeBroadcast indicates an expected call of ChangeBroadcast.
func (mr *MockIBroadcastsMockRecorder) ChangeBroadcast(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeBroadcast", reflect.TypeOf((*MockIBroadcasts)(nil).ChangeBroadcast), item)
}

// CreateBroadcast mocks base method.
func (m *MockIBroadcasts) CreateBroadcast(item models.PostBroadcast) (models.Broadcasts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBroadcast", item)
	ret0, _ := ret[0].(models.Broadcasts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBroadcast indicates an expected call of CreateBroadcast.
func (mr *MockIBroadcastsMockRecorder) CreateBroadcast(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBroadcast", reflect.TypeOf((*MockIBroadcasts)(nil).CreateBroadcast), item)
}

// DeleteBroadcast mocks base method.
func (m *MockIBroadcasts) DeleteBroadcast(id types.UUID) (api.SIdentifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBroadcast", id)
	ret0, _ := ret[0].(api.SIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBroadcast indicates an expected call of DeleteBroadcast.
func (mr *MockIBroadcastsMockRecorder) DeleteBroadcast(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBroadcast", reflect.TypeOf((*MockIBroadcasts)(nil).DeleteBroadcast), id)
}

// GetArchBroadcasts mocks base method.
func (m *MockIBroadcasts) GetArchBroadcasts(username api.SUsername) ([]models.Broadcasts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArchBroadcasts", username)
	ret0, _ := ret[0].([]models.Broadcasts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArchBroadcasts indicates an expected call of GetArchBroadcasts.
func (mr *MockIBroadcastsMockRecorder) GetArchBroadcasts(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArchBroadcasts", reflect.TypeOf((*MockIBroadcasts)(nil).GetArchBroadcasts), username)
}

// GetBroadcastById mocks base method.
func (m *MockIBroadcasts) GetBroadcastById(id types.UUID) (models.Broadcasts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcastById", id)
	ret0, _ := ret[0].(models.Broadcasts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcastById indicates an expected call of GetBroadcastById.
func (mr *MockIBroadcastsMockRecorder) GetBroadcastById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcastById", reflect.TypeOf((*MockIBroadcasts)(nil).GetBroadcastById), id)
}

// GetBroadcasts mocks base method.
func (m *MockIBroadcasts) GetBroadcasts() ([]models.Broadcasts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBroadcasts")
	ret0, _ := ret[0].([]models.Broadcasts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBroadcasts indicates an expected call of GetBroadcasts.
func (mr *MockIBroadcastsMockRecorder) GetBroadcasts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBroadcasts", reflect.TypeOf((*MockIBroadcasts)(nil).GetBroadcasts))
}

// MockIParticipants is a mock of IParticipants interface.
type MockIParticipants struct {
	ctrl     *gomock.Controller
	recorder *MockIParticipantsMockRecorder
}

// MockIParticipantsMockRecorder is the mock recorder for MockIParticipants.
type MockIParticipantsMockRecorder struct {
	mock *MockIParticipants
}

// NewMockIParticipants creates a new mock instance.
func NewMockIParticipants(ctrl *gomock.Controller) *MockIParticipants {
	mock := &MockIParticipants{ctrl: ctrl}
	mock.recorder = &MockIParticipantsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParticipants) EXPECT() *MockIParticipantsMockRecorder {
	return m.recorder
}

// CreateParticipant mocks base method.
func (m *MockIParticipants) CreateParticipant(channel string, user models.PostParticipant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateParticipant", channel, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateParticipant indicates an expected call of CreateParticipant.
func (mr *MockIParticipantsMockRecorder) CreateParticipant(channel, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateParticipant", reflect.TypeOf((*MockIParticipants)(nil).CreateParticipant), channel, user)
}

// GetParticipants mocks base method.
func (m *MockIParticipants) GetParticipants(channel string) ([]models.Participant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetParticipants", channel)
	ret0, _ := ret[0].([]models.Participant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetParticipants indicates an expected call of GetParticipants.
func (mr *MockIParticipantsMockRecorder) GetParticipants(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetParticipants", reflect.TypeOf((*MockIParticipants)(nil).GetParticipants), channel)
}

// MockIMessages is a mock of IMessages interface.
type MockIMessages struct {
	ctrl     *gomock.Controller
	recorder *MockIMessagesMockRecorder
}

// MockIMessagesMockRecorder is the mock recorder for MockIMessages.
type MockIMessagesMockRecorder struct {
	mock *MockIMessages
}

// NewMockIMessages creates a new mock instance.
func NewMockIMessages(ctrl *gomock.Controller) *MockIMessages {
	mock := &MockIMessages{ctrl: ctrl}
	mock.recorder = &MockIMessagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessages) EXPECT() *MockIMessagesMockRecorder {
	return m.recorder
}

// CreateMsg mocks base method.
func (m *MockIMessages) CreateMsg(channel string, msg models.PostMessage) (models.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMsg", channel, msg)
	ret0, _ := ret[0].(models.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMsg indicates an expected call of CreateMsg.
func (mr *MockIMessagesMockRecorder) CreateMsg(channel, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMsg", reflect.TypeOf((*MockIMessages)(nil).CreateMsg), channel, msg)
}

// CreateReaction mocks base method.
func (m *MockIMessages) CreateReaction(channel string, item models.PostReactionMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReaction", channel, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateReaction indicates an expected call of CreateReaction.
func (mr *MockIMessagesMockRecorder) CreateReaction(channel, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReaction", reflect.TypeOf((*MockIMessages)(nil).CreateReaction), channel, item)
}

// DeleteReaction mocks base method.
func (m *MockIMessages) DeleteReaction(channel string, item models.PatchReactionMsg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReaction", channel, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReaction indicates an expected call of DeleteReaction.
func (mr *MockIMessagesMockRecorder) DeleteReaction(channel, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReaction", reflect.TypeOf((*MockIMessages)(nil).DeleteReaction), channel, item)
}

// GetMessageByChannel mocks base method.
func (m *MockIMessages) GetMessageByChannel(channel string) ([]models.Messages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByChannel", channel)
	ret0, _ := ret[0].([]models.Messages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByChannel indicates an expected call of GetMessageByChannel.
func (mr *MockIMessagesMockRecorder) GetMessageByChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByChannel", reflect.TypeOf((*MockIMessages)(nil).GetMessageByChannel), channel)
}

// MockIStream is a mock of IStream interface.
type MockIStream struct {
	ctrl     *gomock.Controller
	recorder *MockIStreamMockRecorder
}

// MockIStreamMockRecorder is the mock recorder for MockIStream.
type MockIStreamMockRecorder struct {
	mock *MockIStream
}

// NewMockIStream creates a new mock instance.
func NewMockIStream(ctrl *gomock.Controller) *MockIStream {
	mock := &MockIStream{ctrl: ctrl}
	mock.recorder = &MockIStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStream) EXPECT() *MockIStreamMockRecorder {
	return m.recorder
}

// ChangeDescByUsername mocks base method.
func (m *MockIStream) ChangeDescByUsername(stream models.PutStream) (models.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeDescByUsername", stream)
	ret0, _ := ret[0].(models.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeDescByUsername indicates an expected call of ChangeDescByUsername.
func (mr *MockIStreamMockRecorder) ChangeDescByUsername(stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeDescByUsername", reflect.TypeOf((*MockIStream)(nil).ChangeDescByUsername), stream)
}

// ClearChat mocks base method.
func (m *MockIStream) ClearChat(channel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearChat", channel)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearChat indicates an expected call of ClearChat.
func (mr *MockIStreamMockRecorder) ClearChat(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearChat", reflect.TypeOf((*MockIStream)(nil).ClearChat), channel)
}

// CreateStream mocks base method.
func (m *MockIStream) CreateStream(username api.SUsername) (models.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStream", username)
	ret0, _ := ret[0].(models.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStream indicates an expected call of CreateStream.
func (mr *MockIStreamMockRecorder) CreateStream(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStream", reflect.TypeOf((*MockIStream)(nil).CreateStream), username)
}

// GetStream mocks base method.
func (m *MockIStream) GetStream(username string) (models.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStream", username)
	ret0, _ := ret[0].(models.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStream indicates an expected call of GetStream.
func (mr *MockIStreamMockRecorder) GetStream(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStream", reflect.TypeOf((*MockIStream)(nil).GetStream), username)
}

// MockILive is a mock of ILive interface.
type MockILive struct {
	ctrl     *gomock.Controller
	recorder *MockILiveMockRecorder
}

// MockILiveMockRecorder is the mock recorder for MockILive.
type MockILiveMockRecorder struct {
	mock *MockILive
}

// NewMockILive creates a new mock instance.
func NewMockILive(ctrl *gomock.Controller) *MockILive {
	mock := &MockILive{ctrl: ctrl}
	mock.recorder = &MockILiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILive) EXPECT() *MockILiveMockRecorder {
	return m.recorder
}

// GetLive mocks base method.
func (m *MockILive) GetLive() ([]models.Live, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLive")
	ret0, _ := ret[0].([]models.Live)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLive indicates an expected call of GetLive.
func (mr *MockILiveMockRecorder) GetLive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLive", reflect.TypeOf((*MockILive)(nil).GetLive))
}

// GetLiveById mocks base method.
func (m *MockILive) GetLiveById(id types.UUID) (models.Live, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLiveById", id)
	ret0, _ := ret[0].(models.Live)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLiveById indicates an expected call of GetLiveById.
func (mr *MockILiveMockRecorder) GetLiveById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLiveById", reflect.TypeOf((*MockILive)(nil).GetLiveById), id)
}

// MockIImages is a mock of IImages interface.
type MockIImages struct {
	ctrl     *gomock.Controller
	recorder *MockIImagesMockRecorder
}

// MockIImagesMockRecorder is the mock recorder for MockIImages.
type MockIImagesMockRecorder struct {
	mock *MockIImages
}

// NewMockIImages creates a new mock instance.
func NewMockIImages(ctrl *gomock.Controller) *MockIImages {
	mock := &MockIImages{ctrl: ctrl}
	mock.recorder = &MockIImagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIImages) EXPECT() *MockIImagesMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockIImages) CreateImage(id string, file []byte) (models.ResImage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", id, file)
	ret0, _ := ret[0].(models.ResImage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockIImagesMockRecorder) CreateImage(id, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockIImages)(nil).CreateImage), id, file)
}

// DelImageById mocks base method.
func (m *MockIImages) DelImageById(id types.UUID) (api.SIdentifier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelImageById", id)
	ret0, _ := ret[0].(api.SIdentifier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DelImageById indicates an expected call of DelImageById.
func (mr *MockIImagesMockRecorder) DelImageById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelImageById", reflect.TypeOf((*MockIImages)(nil).DelImageById), id)
}

// GetImageById mocks base method.
func (m *MockIImages) GetImageById(id types.UUID) ([]uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageById", id)
	ret0, _ := ret[0].([]uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageById indicates an expected call of GetImageById.
func (mr *MockIImagesMockRecorder) GetImageById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageById", reflect.TypeOf((*MockIImages)(nil).GetImageById), id)
}

// MockIZoom is a mock of IZoom interface.
type MockIZoom struct {
	ctrl     *gomock.Controller
	recorder *MockIZoomMockRecorder
}

// MockIZoomMockRecorder is the mock recorder for MockIZoom.
type MockIZoomMockRecorder struct {
	mock *MockIZoom
}

// NewMockIZoom creates a new mock instance.
func NewMockIZoom(ctrl *gomock.Controller) *MockIZoom {
	mock := &MockIZoom{ctrl: ctrl}
	mock.recorder = &MockIZoomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIZoom) EXPECT() *MockIZoomMockRecorder {
	return m.recorder
}

// GetObjectZoom mocks base method.
func (m *MockIZoom) GetObjectZoom(json string) (models.Zoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectZoom", json)
	ret0, _ := ret[0].(models.Zoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectZoom indicates an expected call of GetObjectZoom.
func (mr *MockIZoomMockRecorder) GetObjectZoom(json interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectZoom", reflect.TypeOf((*MockIZoom)(nil).GetObjectZoom), json)
}

// GetZoomByEmail mocks base method.
func (m *MockIZoom) GetZoomByEmail(email string) ([]models.Zoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomByEmail", email)
	ret0, _ := ret[0].([]models.Zoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomByEmail indicates an expected call of GetZoomByEmail.
func (mr *MockIZoomMockRecorder) GetZoomByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomByEmail", reflect.TypeOf((*MockIZoom)(nil).GetZoomByEmail), email)
}

// GetZoomById mocks base method.
func (m *MockIZoom) GetZoomById(id types.UUID) (models.Zoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetZoomById", id)
	ret0, _ := ret[0].(models.Zoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetZoomById indicates an expected call of GetZoomById.
func (mr *MockIZoomMockRecorder) GetZoomById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetZoomById", reflect.TypeOf((*MockIZoom)(nil).GetZoomById), id)
}

// SaveZoom mocks base method.
func (m *MockIZoom) SaveZoom(item models.Zoom) (models.Zoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveZoom", item)
	ret0, _ := ret[0].(models.Zoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveZoom indicates an expected call of SaveZoom.
func (mr *MockIZoomMockRecorder) SaveZoom(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveZoom", reflect.TypeOf((*MockIZoom)(nil).SaveZoom), item)
}

// SendMail mocks base method.
func (m *MockIZoom) SendMail(item models.Zoom) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockIZoomMockRecorder) SendMail(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockIZoom)(nil).SendMail), item)
}
