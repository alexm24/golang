// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/go-chi/chi/v5"
)

// SAdmin defines model for SAdmin.
type SAdmin struct {
	IsAdmin *bool `json:"is_admin,omitempty"`
}

// SAnyValue defines model for SAnyValue.
type SAnyValue = interface{}

// SBroadcast defines model for SBroadcast.
type SBroadcast struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Owner       *string `json:"owner,omitempty"`
	StreamKey   *string `json:"stream_key,omitempty"`
}

// SDescription defines model for SDescription.
type SDescription struct {
	Description *string `json:"description,omitempty"`
}

// SEMail defines model for SEMail.
type SEMail struct {
	Email *string `json:"email,omitempty"`
}

// SFile defines model for SFile.
type SFile struct {
	File *string `json:"file,omitempty"`
}

// SFullname defines model for SFullname.
type SFullname struct {
	Fullname *string `json:"fullname,omitempty"`
}

// SIdentifier defines model for SIdentifier.
type SIdentifier struct {
	Id *openapi_types.UUID `json:"id,omitempty"`
}

// SJson defines model for SJson.
type SJson struct {
	Json *string `json:"json,omitempty"`
}

// SLifeCycle defines model for SLifeCycle.
type SLifeCycle struct {
	Life *string `json:"life,omitempty"`
}

// SMessage defines model for SMessage.
type SMessage struct {
	Avatar     *string    `json:"avatar,omitempty"`
	IsAnon     *bool      `db:"is_anon" json:"is_anon,omitempty"`
	IsQuestion *bool      `db:"is_question" json:"is_question,omitempty"`
	Reactions  *string    `json:"reactions,omitempty"`
	Text       *string    `json:"text,omitempty"`
	Time       *time.Time `json:"time,omitempty"`
}

// SPlace defines model for SPlace.
type SPlace struct {
	Place *string `json:"place,omitempty"`
}

// SPreviewUrl defines model for SPreviewUrl.
type SPreviewUrl struct {
	PreviewUrl *string `json:"preview_url,omitempty"`
}

// SStartTime defines model for SStartTime.
type SStartTime struct {
	StartTime *time.Time `db:"start_time" json:"start_time,omitempty"`
}

// SStreamUrl defines model for SStreamUrl.
type SStreamUrl struct {
	StreamUrl *string `json:"stream_url,omitempty"`
}

// SToken defines model for SToken.
type SToken struct {
	Exp   *time.Time `json:"exp,omitempty"`
	Token *string    `json:"token,omitempty"`
}

// SType defines model for SType.
type SType struct {
	Type *string `json:"type,omitempty"`
}

// SUsername defines model for SUsername.
type SUsername struct {
	Username *string `json:"username,omitempty"`
}

// SZoom defines model for SZoom.
type SZoom struct {
	RecordingCount *int64  `db:"recording_count" json:"recording_count,omitempty"`
	Topic          *string `json:"topic,omitempty"`
}

// CheckAdminJSONBody defines parameters for CheckAdmin.
type CheckAdminJSONBody = SUsername

// PostBroadcastsJSONBody defines parameters for PostBroadcasts.
type PostBroadcastsJSONBody struct {
	Description *string    `json:"description,omitempty"`
	Name        *string    `json:"name,omitempty"`
	Owner       *string    `json:"owner,omitempty"`
	StartTime   *time.Time `db:"start_time" json:"start_time,omitempty"`
	StreamKey   *string    `json:"stream_key,omitempty"`
}

// PutBroadcastJSONBody defines parameters for PutBroadcast.
type PutBroadcastJSONBody struct {
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Owner       *string             `json:"owner,omitempty"`
	StartTime   *time.Time          `db:"start_time" json:"start_time,omitempty"`
	StreamKey   *string             `json:"stream_key,omitempty"`
}

// PostUserGetBroadcastArchJSONBody defines parameters for PostUserGetBroadcastArch.
type PostUserGetBroadcastArchJSONBody = SUsername

// PostMsgByChannelJSONBody defines parameters for PostMsgByChannel.
type PostMsgByChannelJSONBody struct {
	Avatar     *string    `json:"avatar,omitempty"`
	Fullname   *string    `json:"fullname,omitempty"`
	IsAnon     *bool      `db:"is_anon" json:"is_anon,omitempty"`
	IsQuestion *bool      `db:"is_question" json:"is_question,omitempty"`
	Reactions  *string    `json:"reactions,omitempty"`
	Text       *string    `json:"text,omitempty"`
	Time       *time.Time `json:"time,omitempty"`
	Username   *string    `json:"username,omitempty"`
}

// PatchReactionMsgJSONBody defines parameters for PatchReactionMsg.
type PatchReactionMsgJSONBody struct {
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Username *string             `json:"username,omitempty"`
}

// PostReactionMsgJSONBody defines parameters for PostReactionMsg.
type PostReactionMsgJSONBody struct {
	Id       *openapi_types.UUID `json:"id,omitempty"`
	Type     *string             `json:"type,omitempty"`
	Username *string             `json:"username,omitempty"`
}

// PostParticipantsByChannelJSONBody defines parameters for PostParticipantsByChannel.
type PostParticipantsByChannelJSONBody struct {
	Email    *string `json:"email,omitempty"`
	Fullname *string `json:"fullname,omitempty"`
	Username *string `json:"username,omitempty"`
}

// PostStreamJSONBody defines parameters for PostStream.
type PostStreamJSONBody = SUsername

// PutStreamJSONBody defines parameters for PutStream.
type PutStreamJSONBody struct {
	Description *string `json:"description,omitempty"`
	Username    *string `json:"username,omitempty"`
}

// PostUserGetTokenJSONBody defines parameters for PostUserGetToken.
type PostUserGetTokenJSONBody = SUsername

// PostZoomJSONBody defines parameters for PostZoom.
type PostZoomJSONBody = interface{}

// CheckAdminJSONRequestBody defines body for CheckAdmin for application/json ContentType.
type CheckAdminJSONRequestBody = CheckAdminJSONBody

// PostBroadcastsJSONRequestBody defines body for PostBroadcasts for application/json ContentType.
type PostBroadcastsJSONRequestBody PostBroadcastsJSONBody

// PutBroadcastJSONRequestBody defines body for PutBroadcast for application/json ContentType.
type PutBroadcastJSONRequestBody PutBroadcastJSONBody

// PostUserGetBroadcastArchJSONRequestBody defines body for PostUserGetBroadcastArch for application/json ContentType.
type PostUserGetBroadcastArchJSONRequestBody = PostUserGetBroadcastArchJSONBody

// PostMsgByChannelJSONRequestBody defines body for PostMsgByChannel for application/json ContentType.
type PostMsgByChannelJSONRequestBody PostMsgByChannelJSONBody

// PatchReactionMsgJSONRequestBody defines body for PatchReactionMsg for application/json ContentType.
type PatchReactionMsgJSONRequestBody PatchReactionMsgJSONBody

// PostReactionMsgJSONRequestBody defines body for PostReactionMsg for application/json ContentType.
type PostReactionMsgJSONRequestBody PostReactionMsgJSONBody

// PostParticipantsByChannelJSONRequestBody defines body for PostParticipantsByChannel for application/json ContentType.
type PostParticipantsByChannelJSONRequestBody PostParticipantsByChannelJSONBody

// PostStreamJSONRequestBody defines body for PostStream for application/json ContentType.
type PostStreamJSONRequestBody = PostStreamJSONBody

// PutStreamJSONRequestBody defines body for PutStream for application/json ContentType.
type PutStreamJSONRequestBody PutStreamJSONBody

// PostUserGetTokenJSONRequestBody defines body for PostUserGetToken for application/json ContentType.
type PostUserGetTokenJSONRequestBody = PostUserGetTokenJSONBody

// PostZoomJSONRequestBody defines body for PostZoom for application/json ContentType.
type PostZoomJSONRequestBody = PostZoomJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Sends a request with a user
	// (POST /admin)
	CheckAdmin(w http.ResponseWriter, r *http.Request)
	// List of upcoming or current broadcasts
	// (GET /broadcasts)
	GetBroadcasts(w http.ResponseWriter, r *http.Request)
	// Adds a new broadcast
	// (POST /broadcasts)
	PostBroadcasts(w http.ResponseWriter, r *http.Request)
	// Updates the broadcast
	// (PUT /broadcasts)
	PutBroadcast(w http.ResponseWriter, r *http.Request)
	// Returns a list of archived broadcasts
	// (POST /broadcasts/arch)
	PostUserGetBroadcastArch(w http.ResponseWriter, r *http.Request)
	// Delete broadcast by id
	// (DELETE /broadcasts/{id})
	DeleteBroadcast(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get broadcast by id
	// (GET /broadcasts/{id})
	GetBroadcastById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Post image
	// (POST /images)
	PostImage(w http.ResponseWriter, r *http.Request)
	// Get image by id
	// (GET /images/{id})
	GetImageById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Set null by id
	// (PUT /images/{id})
	PutImageById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get all live
	// (GET /live)
	GetLive(w http.ResponseWriter, r *http.Request)
	// Get live by id
	// (GET /live/{id})
	GetLiveById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get messages
	// (GET /messages/{channel})
	GetMsgByChannel(w http.ResponseWriter, r *http.Request, channel string)
	// Send message
	// (POST /messages/{channel})
	PostMsgByChannel(w http.ResponseWriter, r *http.Request, channel string)
	// Delete existing reaction in message
	// (PATCH /messages/{channel}/reaction)
	PatchReactionMsg(w http.ResponseWriter, r *http.Request, channel string)
	// Send reaction for message
	// (POST /messages/{channel}/reaction)
	PostReactionMsg(w http.ResponseWriter, r *http.Request, channel string)
	// Stream members
	// (GET /participants/{channel})
	GetParticipantsByChannel(w http.ResponseWriter, r *http.Request, channel string)
	// Send information about the user
	// (POST /participants/{channel})
	PostParticipantsByChannel(w http.ResponseWriter, r *http.Request, channel string)
	// Added stream
	// (POST /stream)
	PostStream(w http.ResponseWriter, r *http.Request)
	// Update stream field description
	// (PUT /stream)
	PutStream(w http.ResponseWriter, r *http.Request)
	// Clear chat history
	// (DELETE /stream/chat/{channel})
	DeleteStreamChat(w http.ResponseWriter, r *http.Request, channel string)
	// Get stream info by username
	// (GET /stream/{username})
	GetStreamByUsername(w http.ResponseWriter, r *http.Request, username string)
	// Get token
	// (POST /token)
	PostUserGetToken(w http.ResponseWriter, r *http.Request)
	// Hook send zoom service
	// (POST /zoom)
	PostZoom(w http.ResponseWriter, r *http.Request)
	// Get array zoom conference by email
	// (GET /zoom/email/{email})
	GetZoomByEmail(w http.ResponseWriter, r *http.Request, email string)
	// Get zoom by id
	// (GET /zoom/{id})
	GetZoomById(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CheckAdmin operation middleware
func (siw *ServerInterfaceWrapper) CheckAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CheckAdmin(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetBroadcasts operation middleware
func (siw *ServerInterfaceWrapper) GetBroadcasts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBroadcasts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostBroadcasts operation middleware
func (siw *ServerInterfaceWrapper) PostBroadcasts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBroadcasts(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutBroadcast operation middleware
func (siw *ServerInterfaceWrapper) PutBroadcast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBroadcast(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUserGetBroadcastArch operation middleware
func (siw *ServerInterfaceWrapper) PostUserGetBroadcastArch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserGetBroadcastArch(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteBroadcast operation middleware
func (siw *ServerInterfaceWrapper) DeleteBroadcast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBroadcast(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetBroadcastById operation middleware
func (siw *ServerInterfaceWrapper) GetBroadcastById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBroadcastById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostImage operation middleware
func (siw *ServerInterfaceWrapper) PostImage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostImage(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetImageById operation middleware
func (siw *ServerInterfaceWrapper) GetImageById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetImageById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutImageById operation middleware
func (siw *ServerInterfaceWrapper) PutImageById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutImageById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLive operation middleware
func (siw *ServerInterfaceWrapper) GetLive(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLive(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetLiveById operation middleware
func (siw *ServerInterfaceWrapper) GetLiveById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetLiveById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetMsgByChannel operation middleware
func (siw *ServerInterfaceWrapper) GetMsgByChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMsgByChannel(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostMsgByChannel operation middleware
func (siw *ServerInterfaceWrapper) PostMsgByChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostMsgByChannel(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PatchReactionMsg operation middleware
func (siw *ServerInterfaceWrapper) PatchReactionMsg(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchReactionMsg(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostReactionMsg operation middleware
func (siw *ServerInterfaceWrapper) PostReactionMsg(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostReactionMsg(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetParticipantsByChannel operation middleware
func (siw *ServerInterfaceWrapper) GetParticipantsByChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetParticipantsByChannel(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostParticipantsByChannel operation middleware
func (siw *ServerInterfaceWrapper) PostParticipantsByChannel(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostParticipantsByChannel(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostStream operation middleware
func (siw *ServerInterfaceWrapper) PostStream(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStream(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PutStream operation middleware
func (siw *ServerInterfaceWrapper) PutStream(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutStream(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteStreamChat operation middleware
func (siw *ServerInterfaceWrapper) DeleteStreamChat(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "channel" -------------
	var channel string

	err = runtime.BindStyledParameter("simple", false, "channel", chi.URLParam(r, "channel"), &channel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "channel", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteStreamChat(w, r, channel)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetStreamByUsername operation middleware
func (siw *ServerInterfaceWrapper) GetStreamByUsername(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameter("simple", false, "username", chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStreamByUsername(w, r, username)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostUserGetToken operation middleware
func (siw *ServerInterfaceWrapper) PostUserGetToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserGetToken(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// PostZoom operation middleware
func (siw *ServerInterfaceWrapper) PostZoom(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostZoom(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetZoomByEmail operation middleware
func (siw *ServerInterfaceWrapper) GetZoomByEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "email" -------------
	var email string

	err = runtime.BindStyledParameter("simple", false, "email", chi.URLParam(r, "email"), &email)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "email", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetZoomByEmail(w, r, email)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetZoomById operation middleware
func (siw *ServerInterfaceWrapper) GetZoomById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetZoomById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/admin", wrapper.CheckAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/broadcasts", wrapper.GetBroadcasts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/broadcasts", wrapper.PostBroadcasts)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/broadcasts", wrapper.PutBroadcast)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/broadcasts/arch", wrapper.PostUserGetBroadcastArch)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/broadcasts/{id}", wrapper.DeleteBroadcast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/broadcasts/{id}", wrapper.GetBroadcastById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/images", wrapper.PostImage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/images/{id}", wrapper.GetImageById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/images/{id}", wrapper.PutImageById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/live", wrapper.GetLive)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/live/{id}", wrapper.GetLiveById)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{channel}", wrapper.GetMsgByChannel)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages/{channel}", wrapper.PostMsgByChannel)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/messages/{channel}/reaction", wrapper.PatchReactionMsg)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages/{channel}/reaction", wrapper.PostReactionMsg)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/participants/{channel}", wrapper.GetParticipantsByChannel)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/participants/{channel}", wrapper.PostParticipantsByChannel)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/stream", wrapper.PostStream)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/stream", wrapper.PutStream)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/stream/chat/{channel}", wrapper.DeleteStreamChat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stream/{username}", wrapper.GetStreamByUsername)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/token", wrapper.PostUserGetToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/zoom", wrapper.PostZoom)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/zoom/email/{email}", wrapper.GetZoomByEmail)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/zoom/{id}", wrapper.GetZoomById)
	})

	return r
}
